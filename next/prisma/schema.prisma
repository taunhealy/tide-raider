generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BeachGoodRating {
  id         String   @id @default(uuid())
  beachId    String
  region     String
  score      Int
  conditions Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  date       DateTime

  @@unique([beachId, date])
  @@index([date, region])
  @@index([beachId, date])
}

model AdRequest {
  id                    String   @id
  companyName           String
  contactEmail          String
  imageUrl              String?
  linkUrl               String
  status                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  rejectionReason       String?
  lemonSubscriptionId   String?
  userId                String?
  category              String
  categoryData          Json?
  googleAdsCampaignId   String?
  googleAdsContribution Float
  regionId              String   // Changed from region String to regionId String
  title                 String?
  yearlyPrice           Float
  startDate             DateTime
  endDate               DateTime
  payfastSubscriptionId String?
  variantId             String?
  region                Region   @relation(fields: [regionId], references: [id])
  user                  User?    @relation(fields: [userId], references: [id])

  @@index([payfastSubscriptionId])
  @@index([regionId])
  @@index([category])
  @@index([status])
}

model User {
  id                  String              @id @default(cuid())
  name                String
  email               String              @unique
  emailVerified       DateTime?
  image               String?
  nationality         String?
  password            String?
  comments            Comment[]
  skillLevel          SkillLevel?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  lemonCustomerId     String?
  lemonSubscriptionId String?
  savedFilters        Json?
  hasActiveTrial      Boolean             @default(false)
   hasTrialEnded       Boolean             @default(false)
  trialEndDate        DateTime?
  trialStartDate      DateTime?
  bio                 String?
  link                String?
  subscriptionEndsAt  DateTime?
  subscriptionStatus  String?
  paypalSubscriptionId String?
  accounts            Account[]
  adRequests          AdRequest[]
  boards              Board[]
  events              Event[]
  logEntries          LogEntry[]
  membership          Membership?
  safariBookings      SafariBooking[]
  sessions            Session[]
  stories             Story[]
  surfSafaris         SurfSafariListing[]
  favorites           UserFavorite[]
  filters             UserFilters?
  rentalItems         RentalItem[]
  rentedItemRequests  RentalItemRequest[]  @relation("RenterItemRequests")
  ownedItemRequests   RentalItemRequest[]  @relation("OwnerItemRequests")
  rentalChatMessages  RentalChatMessage[]

  @@index([email])
  @@index([skillLevel])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  country     String
  regionId    String   // Changed from region String to regionId String
  region      Region   @relation(fields: [regionId], references: [id])
  startTime   DateTime
  link        String?
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([regionId])
}

model LogEntry {
  id           String   @id @default(uuid())
  date         DateTime
  surferName   String?
  surferEmail  String?
  beachName    String?
  surferRating Float?
  comments     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  imageUrl     String?
  isPrivate    Boolean  @default(false)
  isAnonymous  Boolean  @default(false)
  continent    String?
  country      String?
  region       String?
  waveType     String?
  beachId      String?
  forecast     Json?
  userId       String?  @map("user_id")
  beach        Beach?   @relation(fields: [beachId], references: [id])
  user         User?    @relation(fields: [userId], references: [id])

  @@index([isPrivate])
  @@index([userId])
  @@index([date])
  @@index([beachId])
  @@index([surferRating])
}

model SafariBooking {
  id             String            @id @default(cuid())
  safariId       String
  userId         String
  date           DateTime
  bringingBoard  Boolean           @default(false)
  requiresRental Boolean           @default(false)
  skillLevel     SkillLevel
  status         BookingStatus     @default(PENDING)
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  boardId        String?
  board          Board?            @relation(fields: [boardId], references: [id])
  safari         SurfSafariListing @relation(fields: [safariId], references: [id])
  user           User              @relation(fields: [userId], references: [id])

  @@index([safariId])
  @@index([userId])
  @@index([date])
  @@index([status])
  @@index([boardId])
}
model SurfSafariListing {
  id                     String                  @id @default(cuid())
  guideId                String
  title                  String
  description            String
  profileImage           String?
  price                  Float?
  isFree                 Boolean                 @default(false)
  hasVehicleTransport    Boolean                 @default(false)
  canTransportLongboard  Boolean                 @default(false)
  canTransportShortboard Boolean                 @default(false)
  isActive               Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  beaches                BeachSafariConnection[]
  bookings               SafariBooking[]
  guide                  User                    @relation(fields: [guideId], references: [id], onDelete: Cascade)

  @@index([guideId])
  @@index([isActive])
}

model BeachSafariConnection {
  id       String            @id @default(cuid())
  beachId  String
  safariId String
  distance Float?
  safari   SurfSafariListing @relation(fields: [safariId], references: [id])

  @@unique([beachId, safariId])
  @@index([safariId])
  @@index([beachId])
}

model Beach {
  id          String     @id
  name        String
  continent   String
  country     String
  regionId    String     // Changed from region String to regionId String
  region      Region       @relation(fields: [regionId], references: [id])
  location    String
  distanceFromCT Float
  optimalWindDirections String[]
  optimalSwellDirections Json
  bestSeasons String[]
  optimalTide String
  description String
  difficulty  String
  waveType    String
  swellSize   Json
  idealSwellPeriod Json
  waterTemp   Json
  hazards     String[]
  crimeLevel  String
  sharkAttack Json
  image       String?
  coordinates Json
  videos      Json?
  profileImage String?
  advertisingPrice Float?
  coffeeShop  Json?
  hasSharkAlert Boolean?
  bestMonthOfYear String?
  isHiddenGem Boolean?
  sheltered   Boolean?

  feedbacks   Feedback[]
  logEntries  LogEntry[]
  stories     Story[]
  rentalItems       BeachRentalConnection[]
  rentalItemRequests RentalItemRequest[]

  @@index([regionId])
  @@index([country])
  @@index([waveType])
  @@index([difficulty])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Membership {
  id             String   @id @default(cuid())
  userId         String   @unique
  lemonSqueezyId String?
  variantId      Int?
  checkoutUrl    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Board {
  id             String          @id @default(cuid())
  userId         String
  name           String
  type           BoardType
  length         Float
  finSetup       FinType
  images         String[]
  thumbnail      String?
  user           User            @relation(fields: [userId], references: [id])
  
  // Only keep safari bookings
  safariBookings SafariBooking[]
  
  @@index([userId])
}

model ForecastA {
  id             String   @id @default(uuid())
  date           DateTime
  region         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  windSpeed      Int      @default(0)
  windDirection  Float    @default(0)
  swellHeight    Float    @default(0)
  swellPeriod    Int      @default(0)
  swellDirection Float    @default(0)

  @@unique([date, region])
}

model ForecastB {
  id        String   @id @default(uuid())
  date      DateTime
  region    String
  forecast  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, region])
}

model Feedback {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  date         DateTime
  beachId      String
  conditions   Json
  improvements String?
  beach        Beach    @relation(fields: [beachId], references: [id])
}

model Story {
  id          String   @id @default(cuid())
  title       String
  details     String
  date        DateTime
  category    String
  link        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  beachName   String?
  beachId     String?
  regionId    String?  // New field to directly associate with a region
  customBeach String?
  author      User     @relation(fields: [authorId], references: [id])
  beach       Beach?   @relation(fields: [beachId], references: [id])
  region      Region?  @relation(fields: [regionId], references: [id]) // New relation

  @@index([authorId])
  @@index([beachId])
  @@index([regionId]) // New index
}

model UserFilters {
  id        String   @id @default(cuid())
  userEmail String   @unique
  filters   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserFavorite {
  id        String   @id @default(cuid())
  userId    String
  title     String   @db.VarChar(255)
  videoLink String   @db.VarChar(2048)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PRO
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum SleepingType {
  COUCH
  PRIVATE_ROOM
  SHARED_ROOM
  AIR_MATTRESS
  MATTRESS
  BUNK
}

enum BoardType {
  SHORTBOARD
  LONGBOARD
  FISH
  FUNBOARD
  SUP
  GUN
  MINI_MAL
}

enum FinType {
  THRUSTER
  TWIN
  QUAD
  SINGLE
  FIVE
  OTHER
}

model RentalItem {
  id                String                  @id @default(cuid())
  name              String
  description       String?
  thumbnail         String?
  images            String[]
  isActive          Boolean                 @default(true)
  rentPrice         Float
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  userId            String
  itemType          String                  // Using String instead of enum for flexibility
  specifications    Json                    // Type-specific details
  
  // Relations
  user              User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  availableBeaches  BeachRentalConnection[]
  rentalRequests    RentalItemRequest[]
  availability      RentalItemAvailability[]
  
  @@index([userId])
  @@index([itemType])
  @@index([isActive])
}

model BeachRentalConnection {
  id            String      @id @default(cuid())
  rentalItemId  String
  beachId       String
  rentalItem    RentalItem  @relation(fields: [rentalItemId], references: [id], onDelete: Cascade)
  beach         Beach       @relation(fields: [beachId], references: [id])
  
  @@unique([rentalItemId, beachId])
  @@index([rentalItemId])
  @@index([beachId])
}

model RentalItemRequest {
  id            String        @id @default(cuid())
  rentalItemId  String
  renterId      String
  ownerId       String
  status        RequestStatus @default(PENDING)
  startDate     DateTime
  endDate       DateTime
  beachId       String        // Pickup/dropoff location
  totalCost     Json          // { zar: number, usd: number }
  messages      RentalChatMessage[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  rentalItem    RentalItem    @relation(fields: [rentalItemId], references: [id])
  renter        User          @relation("RenterItemRequests", fields: [renterId], references: [id])
  owner         User          @relation("OwnerItemRequests", fields: [ownerId], references: [id])
  beach         Beach         @relation(fields: [beachId], references: [id])
  
  // Management fields
  lastActionAt        DateTime @default(now())
  expiresAt           DateTime
  modificationCount   Int      @default(0)
  previousVersions    Json?    // Store history of modifications
  cancellationReason  String?
  
  // Status tracking
  isExpired           Boolean  @default(false)
  hasBeenViewed       Boolean  @default(false)
  viewedAt            DateTime?
  
  // Payment tracking
  paymentIntentId     String?
  depositPaid         Boolean  @default(false)
  
  @@index([rentalItemId])
  @@index([renterId])
  @@index([ownerId])
  @@index([beachId])
  @@index([status])
}

model RentalItemAvailability {
  id           String     @id @default(cuid())
  rentalItemId String
  startDate    DateTime
  endDate      DateTime
  rentalItem   RentalItem @relation(fields: [rentalItemId], references: [id], onDelete: Cascade)
  
  @@index([rentalItemId])
}

model RentalChatMessage {
  id          String            @id @default(cuid())
  requestId   String
  senderId    String
  content     String
  createdAt   DateTime          @default(now())
  request     RentalItemRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  sender      User              @relation(fields: [senderId], references: [id])
  
  @@index([requestId])
  @@index([senderId])
}

model Region {
  id          String    @id
  name        String
  country     String
  continent   String?
  beaches     Beach[]
  stories     Story[]   // Direct relation to stories in this region
  events      Event[]   // Relation to events in this region
  adRequests  AdRequest[] // Relation to ad requests for this region
  // Add other region-related relations as needed
}

model Comment {
  id         String   @id @default(cuid())
  text       String
  entityId   String
  entityType String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entityId, entityType])
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  COMPLETED
}
