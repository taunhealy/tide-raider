generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model BeachGoodRating {
  id         String   @id @default(uuid())
  beachId    String
  region     String
  score      Int
  conditions Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  date       DateTime

  @@unique([beachId, date])
  @@index([date, region])
  @@index([beachId, date])
}

model AdRequest {
  id                    String   @id
  companyName           String
  contactEmail          String
  imageUrl              String?
  linkUrl               String
  status                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  rejectionReason       String?
  lemonSubscriptionId   String?
  userId                String?
  category              String
  categoryData          Json?
  googleAdsCampaignId   String?
  googleAdsContribution Float
  region                String
  title                 String?
  yearlyPrice           Float
  startDate             DateTime
  endDate               DateTime
  payfastSubscriptionId String?
  variantId             String?
  user                  User?    @relation(fields: [userId], references: [id])

  @@index([payfastSubscriptionId])
  @@index([region])
  @@index([category])
  @@index([status])
}

model User {
  id                  String              @id @default(cuid())
  name                String
  email               String              @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  skillLevel          SkillLevel?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  lemonCustomerId     String?
  lemonSubscriptionId String?
  savedFilters        Json?
  hasActiveTrial      Boolean             @default(false)
  trialEndDate        DateTime?
  trialStartDate      DateTime?
  bio                 String?
  link                String?
  subscriptionEndsAt  DateTime?
  subscriptionStatus  String?
  accounts            Account[]
  adRequests          AdRequest[]
  bnbBookings         BnbBooking[]
  bnbListings         BnbListing[]
  boards              Board[]
  events              Event[]
  logEntries          LogEntry[]
  membership          Membership?
  reviews             Review[]
  safariBookings      SafariBooking[]
  sessions            Session[]
  stories             Story[]
  surfSafaris         SurfSafariListing[]
  favorites           UserFavorite[]
  filters             UserFilters?

  @@index([email])
  @@index([skillLevel])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  country     String
  region      String
  startTime   DateTime
  link        String?
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model LogEntry {
  id           String   @id @default(uuid())
  date         DateTime
  surferName   String?
  surferEmail  String?
  beachName    String?
  surferRating Float?
  comments     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  imageUrl     String?
  isPrivate    Boolean  @default(false)
  isAnonymous  Boolean  @default(false)
  continent    String?
  country      String?
  region       String?
  waveType     String?
  beachId      String?
  forecast     Json?
  userId       String?  @map("user_id")
  beach        Beach?   @relation(fields: [beachId], references: [id])
  user         User?    @relation(fields: [userId], references: [id])

  @@index([isPrivate])
  @@index([userId])
  @@index([date])
  @@index([beachId])
  @@index([surferRating])
}

model SafariBooking {
  id             String            @id @default(cuid())
  safariId       String
  userId         String
  date           DateTime
  bringingBoard  Boolean           @default(false)
  requiresRental Boolean           @default(false)
  skillLevel     SkillLevel
  status         BookingStatus     @default(PENDING)
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  boardId        String?
  board          Board?            @relation(fields: [boardId], references: [id])
  safari         SurfSafariListing @relation(fields: [safariId], references: [id])
  user           User              @relation(fields: [userId], references: [id])

  @@index([safariId])
  @@index([userId])
  @@index([date])
  @@index([status])
  @@index([boardId])
}

model BnbBooking {
  id          String        @id @default(cuid())
  listingId   String
  userId      String
  startDate   DateTime
  endDate     DateTime
  boardId     String?
  rentBoardId String?
  notes       String?
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  board       Board?        @relation("UserOwnBoard", fields: [boardId], references: [id])
  listing     BnbListing    @relation(fields: [listingId], references: [id])
  rentBoard   Board?        @relation("RentalBoard", fields: [rentBoardId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@index([listingId])
  @@index([userId])
  @@index([status])
}

model BnbListing {
  id                     String               @id @default(cuid())
  hostId                 String
  title                  String
  description            String
  location               String
  profileImage           String?
  images                 String
  sleepingArrangement    SleepingType
  breakfastOptions       String
  price                  Float?
  isFree                 Boolean              @default(false)
  hasVehicleTransport    Boolean              @default(false)
  canTransportLongboard  Boolean              @default(false)
  canTransportShortboard Boolean              @default(false)
  isActive               Boolean              @default(true)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  beaches                BeachBnbConnection[]
  bookings               BnbBooking[]
  host                   User                 @relation(fields: [hostId], references: [id], onDelete: Cascade)
  reviews                Review[]

  @@index([hostId])
  @@index([isActive])
}

model SurfSafariListing {
  id                     String                  @id @default(cuid())
  guideId                String
  title                  String
  description            String
  profileImage           String?
  price                  Float?
  isFree                 Boolean                 @default(false)
  hasVehicleTransport    Boolean                 @default(false)
  canTransportLongboard  Boolean                 @default(false)
  canTransportShortboard Boolean                 @default(false)
  isActive               Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  beaches                BeachSafariConnection[]
  reviews                Review[]
  bookings               SafariBooking[]
  guide                  User                    @relation(fields: [guideId], references: [id], onDelete: Cascade)

  @@index([guideId])
  @@index([isActive])
}

model BeachSafariConnection {
  id       String            @id @default(cuid())
  beachId  String
  safariId String
  distance Float?
  safari   SurfSafariListing @relation(fields: [safariId], references: [id])

  @@unique([beachId, safariId])
  @@index([safariId])
  @@index([beachId])
}

model BeachBnbConnection {
  id        String     @id @default(cuid())
  beachId   String
  listingId String
  distance  Float?
  listing   BnbListing @relation(fields: [listingId], references: [id])

  @@unique([beachId, listingId])
  @@index([listingId])
  @@index([beachId])
}

model Review {
  id           String             @id @default(cuid())
  userId       String
  rating       Int
  comment      String?
  createdAt    DateTime           @default(now())
  bnbListingId String?
  safariId     String?
  bnbListing   BnbListing?        @relation(fields: [bnbListingId], references: [id])
  safari       SurfSafariListing? @relation(fields: [safariId], references: [id])
  user         User               @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Beach {
  id         String     @id
  regionId   String
  name       String
  region     Region     @relation(fields: [regionId], references: [id])
  feedbacks  Feedback[]
  logEntries LogEntry[]
  stories    Story[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Membership {
  id             String   @id @default(cuid())
  userId         String   @unique
  lemonSqueezyId String?
  variantId      Int?
  checkoutUrl    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Board {
  id             String          @id @default(cuid())
  userId         String
  name           String
  type           BoardType
  length         String
  finSetup       FinType
  isForRent      Boolean         @default(false)
  rentPrice      Float?
  userBookings   BnbBooking[]    @relation("UserOwnBoard")
  rentalBookings BnbBooking[]    @relation("RentalBoard")
  user           User            @relation(fields: [userId], references: [id])
  safariBookings SafariBooking[]

  @@index([userId])
  @@index([isForRent])
}

model ForecastA {
  id             String   @id @default(uuid())
  date           DateTime
  region         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  windSpeed      Int      @default(0)
  windDirection  String   @default("N/A")
  swellHeight    Float    @default(0)
  swellPeriod    Int      @default(0)
  swellDirection Float    @default(0)

  @@unique([date, region])
}

model ForecastB {
  id        String   @id @default(uuid())
  date      DateTime
  region    String
  forecast  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, region])
}

model Feedback {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  date         DateTime
  beachId      String
  conditions   Json
  improvements String?
  beach        Beach    @relation(fields: [beachId], references: [id])
}

model Story {
  id          String   @id @default(cuid())
  title       String
  details     String
  date        DateTime
  category    String
  link        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  beachName   String?
  beachId     String?
  customBeach String?
  author      User     @relation(fields: [authorId], references: [id])
  beach       Beach?   @relation(fields: [beachId], references: [id])

  @@index([authorId])
  @@index([beachId])
}

model UserFilters {
  id        String   @id @default(cuid())
  userEmail String   @unique
  filters   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserFavorite {
  id        String   @id @default(cuid())
  userId    String
  title     String   @db.VarChar(255)
  videoLink String   @db.VarChar(2048)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model Region {
  id      String  @id
  name    String
  beaches Beach[]
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PRO
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum SleepingType {
  COUCH
  PRIVATE_ROOM
  SHARED_ROOM
  AIR_MATTRESS
  MATTRESS
  BUNK
}

enum BoardType {
  SHORTBOARD
  LONGBOARD
  FISH
  FUNBOARD
  SUP
  GUN
  MINI_MAL
}

enum FinType {
  THRUSTER
  TWIN
  QUAD
  SINGLE
  FIVE
  OTHER
}
