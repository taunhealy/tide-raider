// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}


// Core User Model
model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  password      String?
  savedFilters  Json?  
  skillLevel    SkillLevel?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  lemonCustomerId String?
  lemonSubscriptionId String?

  // Auth Relations
  accounts      Account[]
  sessions      Session[]

  // Membership
  membership    Membership?

  // Relations as Host/Guide
  bnbListings   BnbListing[]    // As a BnB host
  surfSafaris   SurfSafariListing[]    // As a safari guide
  
  // Relations as Customer
  bnbBookings   BnbBooking[]    // As a surfer booking BnB
  safariBookings SafariBooking[] // As a surfer booking safari
  reviews       Review[]         // Reviews left by user

  // User's Board Model
  boards        Board[]

  adRequests    AdRequest[]

  @@index([email])
  @@index([skillLevel])
}


// Safari Booking Model
model SafariBooking {
  id          String    @id @default(cuid())
  safariId    String
  userId      String
  date        DateTime
  bringingBoard Boolean  @default(false)
  requiresRental Boolean @default(false)
  skillLevel  SkillLevel
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  boardId     String?
  board       Board?    @relation(fields: [boardId], references: [id])

  safari      SurfSafariListing @relation(fields: [safariId], references: [id], onDelete: Restrict)
  user        User      @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@index([safariId])
  @@index([userId])
  @@index([date])
  @@index([status])
  @@index([boardId])
}

model BnbBooking {
  id          String    @id @default(cuid())
  listingId   String
  userId      String
  startDate   DateTime
  endDate     DateTime
  boardId     String?   // User's own board if they bring one
  rentBoardId String?   // Host's board if they want to rent one
  notes       String?
  status      BookingStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  listing     BnbListing @relation(fields: [listingId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  board       Board?    @relation("UserOwnBoard", fields: [boardId], references: [id])
  rentBoard   Board?    @relation("RentalBoard", fields: [rentBoardId], references: [id])

  @@index([listingId])
  @@index([userId])
  @@index([status])
}


// Enums
enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum SleepingType {
  COUCH
  PRIVATE_ROOM
  SHARED_ROOM
  AIR_MATTRESS
  MATTRESS
  BUNK
}

enum Region {
  WESTERN_CAPE
  EASTERN_CAPE
  KWAZULU_NATAL
  GABON
  NAMIBIA
  ANGOLA
}

enum Location {
  WEST_COAST
  CAPE_PENINSULA
  FALSE_BAY
  OVERBERG
  GARDEN_ROUTE
  SWAKOPMUND
  GABON_COAST
  ROBERTSPORT
  BENGUELA
}

// BnbListing Model
model BnbListing {
  id                  String   @id @default(cuid())
  hostId              String
  title               String
  description         String
  region              Region
  location            String
  profileImage        String?
  images              String
  
  // Accommodation Details
  sleepingArrangement SleepingType
  breakfastOptions    String
  price               Float?
  isFree              Boolean  @default(false)
  
  // Transport
  hasVehicleTransport Boolean   @default(false)
  canTransportLongboard Boolean @default(false)
  canTransportShortboard Boolean @default(false)
  
  // Metadata
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  host                User     @relation(fields: [hostId], references: [id], onDelete: Cascade)
  beaches             BeachBnbConnection[]
  reviews             Review[]
  bookings            BnbBooking[]

  @@index([hostId])
  @@index([region])
  @@index([isActive])
}

// Surf Safari Model
model SurfSafariListing {
  id          String    @id @default(cuid())
  guideId     String
  title       String
  description String
  region      Region
  location    String
  profileImage String?
  
  // Pricing
  price       Float?
  isFree      Boolean   @default(false)
  
  // Transport
  hasVehicleTransport Boolean   @default(false)
  canTransportLongboard Boolean @default(false)
  canTransportShortboard Boolean @default(false)
  
  // Metadata
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  guide        User      @relation(fields: [guideId], references: [id], onDelete: Cascade)
  beaches      BeachSafariConnection[]
  bookings     SafariBooking[]
  reviews      Review[]

  @@index([guideId])
  @@index([region])
  @@index([isActive])
}


model BeachSafariConnection {
  id          String    @id @default(cuid())
  beachId     String
  safariId    String
  distance    Float?    // Distance in km
  
  beach       Beach              @relation(fields: [beachId], references: [id])
  safari      SurfSafariListing  @relation(fields: [safariId], references: [id])

  @@unique([beachId, safariId])
  @@index([safariId])
  @@index([beachId])
}

model BeachBnbConnection {
  id          String     @id @default(cuid())
  beachId     String
  listingId   String
  distance    Float?     // Distance in km
  
  beach       Beach      @relation(fields: [beachId], references: [id])
  listing     BnbListing @relation(fields: [listingId], references: [id])

  @@unique([beachId, listingId])
  @@index([listingId])
  @@index([beachId])
}

model Review {
  id          String      @id @default(cuid())
  userId      String
  rating      Int
  comment     String?
  createdAt   DateTime    @default(now())
  
  // Optional relations (one of these will be set)
  bnbListingId String?
  safariId     String?
  
  user        User        @relation(fields: [userId], references: [id])
  bnbListing  BnbListing? @relation(fields: [bnbListingId], references: [id])
  safari      SurfSafariListing? @relation(fields: [safariId], references: [id])

  @@index([userId])
}

model Beach {
  id          String    @id @default(cuid())
  name        String    @unique
  region      Region
  location    String
  distanceFromCT Float
  advertisingPrice Float @default(100)
  
  // Wave Conditions
  optimalWindDirections Json      // Array of wind direction strings
  optimalSwellMin      Float
  optimalSwellMax      Float
  optimalSwellCardinal String?
  bestSeasons          Json      // Array of season strings
  optimalTide          String
  description          String    // Long text description
  difficulty           String
  waveType             String
  
  // Swell & Conditions
  swellSizeMin         Float
  swellSizeMax         Float
  swellPeriodMin       Float
  swellPeriodMax       Float
  waterTempSummer      Float
  waterTempWinter      Float
  // Safety & Info
  hazards             Json      // Array of hazard strings
  crimeLevel          String
  hasSharkAttack      Boolean   @default(false)
  sharkIncidents      Json?     // Array of incident objects
  image               String?
  coordinates         Json      // { lat: number, lng: number }
  videos              Json?     // Array of video objects
  profileImage        String?
  
  // Relations
  bnbListings         BeachBnbConnection[]
  safaris             BeachSafariConnection[]

  feedback            Feedback[]

  @@index([region])
  @@index([difficulty])
  @@index([waveType])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Membership {
  id              String    @id @default(cuid())
  userId          String    @unique
  lemonSqueezyId  String?
  variantId       Int?
  checkoutUrl     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id])
}

// User's Board Model
model Board {
  id          String    @id @default(cuid())
  userId      String
  name        String    // E.g., "My Fish", "Summer Longboard"
  type        BoardType // Shortboard, Longboard, etc
  length      String    // "6'0", "7'2", etc
  finSetup    FinType   // Thruster, Twin, Quad, etc
  isForRent   Boolean   @default(false)
  rentPrice   Float?
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  safariBookings SafariBooking[]
  userBookings    BnbBooking[] @relation("UserOwnBoard")
  rentalBookings  BnbBooking[] @relation("RentalBoard")

  @@index([userId])
  @@index([isForRent])
}

enum BoardType {
  SHORTBOARD
  LONGBOARD
  FISH
  FUNBOARD
  SUP
  GUN
  MINI_MAL
}

enum FinType {
  THRUSTER
  TWIN
  QUAD
  SINGLE
  FIVE
  OTHER
}

model SurfCondition {
  id            String   @id @default(uuid())
  date          String   // Store as YYYY-MM-DD
  windDirection String
  windSpeed     Float
  swellHeight   Float
  swellDirection String
  swellPeriod   Float
  timestamp     Float    // Regular timestamp, no need for BigInt
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AdRequest {
  id                  String   @id
  beachName           String
  companyName         String
  contactEmail        String
  imageUrl            String?
  linkUrl             String
  startDate           String
  endDate             String
  status              String   
  rejectionReason     String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Add these fields
  userId              String?
  lemonSubscriptionId String?  // Store the Lemon Squeezy subscription ID
  variantId           Int?     // Store the variant ID
  
  user User? @relation(fields: [userId], references: [id])
}

model Feedback {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  date        DateTime
  beachId     String
  beach       Beach    @relation(fields: [beachId], references: [id])
  conditions  Json     // Store conditions as JSON
  improvements String? @db.Text
}